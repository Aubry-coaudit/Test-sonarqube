name: Analyse SonarQube latest

on:
  pull_request:
    branches: [ staging ]
    types: [opened, synchronize, reopened]
  workflow_dispatch:

concurrency:
  group: sonar-${{ github.ref }}
  cancel-in-progress: true

jobs:
  sonar:
    runs-on: [self-hosted, linux, x64]
    timeout-minutes: 20
    permissions: { contents: read }

    env:
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      SONAR_TOKEN:     ${{ secrets.SONAR_TOKEN }}
      HAS_SECRETS: ${{ secrets.SONAR_HOST_URL != '' && secrets.SONAR_TOKEN != '' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with: { distribution: temurin, java-version: '17' }

      - name: Cache Sonar packages
        if: env.HAS_SECRETS == 'true'
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: sonar-${{ runner.os }}-${{ hashFiles('**/*') }}
          restore-keys: sonar-${{ runner.os }}-

      - name: Preflight SonarQube (TLS strict)
        if: env.HAS_SECRETS == 'true'
        run: |
          set -euo pipefail
          : "${SONAR_HOST_URL:?SONAR_HOST_URL is empty. Did you set the secret?}"
          curl -I "${SONAR_HOST_URL%/}/batch/index"
          curl -s "${SONAR_HOST_URL%/}/api/system/status" | jq . || true

      - name: SonarQube Scan
        if: env.HAS_SECRETS == 'true'
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}
          SONAR_TOKEN:     ${{ env.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=sonar-test
            -Dsonar.projectName=Test-SonarQube-depuis-GitHub
            -Dsonar.sources=.
            -Dsonar.exclusions=**/vendor/**,**/node_modules/**,**/dist/**,**/build/**

      - name: SonarQube Quality Gate
        if: env.HAS_SECRETS == 'true'
        uses: SonarSource/sonarqube-quality-gate-action@v1
        env:
          SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}
          SONAR_TOKEN:     ${{ env.SONAR_TOKEN }}

      - name: Skip reason (no secrets)
        if: env.HAS_SECRETS != 'true'
        run: |
          echo "Secrets SONAR_HOST_URL/SONAR_TOKEN indisponibles (PR depuis fork ?)."
          echo "Analyse SonarQube saut√©e."
